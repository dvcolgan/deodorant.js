// Generated by CoffeeScript 1.10.0
(function() {
  var Vector, deodorant, vec;

  deodorant = new Deodorant('debug');

  deodorant.addAlias('Vector', '{x: Number, y: Number}');

  Vector = (function() {
    Vector.prototype.constructor_ = ['Number', 'Number', 'Void'];

    function Vector(x, y) {
      this.x = x;
      this.y = y;
    }

    Vector.prototype.add_ = ['Vector', 'Void'];

    Vector.prototype.add = function(vec) {
      this.x += vec.x;
      this.y += vec.y;
      return this;
    };

    Vector.prototype.sub_ = ['Vector', 'Void'];

    Vector.prototype.sub = function(vec) {
      this.x -= vec.x;
      this.y -= vec.y;
      return this;
    };

    Vector.prototype.mul_ = ['Vector', 'Void'];

    Vector.prototype.mul = function(vec) {
      this.x *= vec.x;
      this.y *= vec.y;
      return this;
    };

    Vector.prototype.div_ = ['Vector', 'Void'];

    Vector.prototype.div = function(vec) {
      this.x /= vec.x;
      this.y /= vec.y;
      return this;
    };

    Vector.prototype.magnitude_ = ['Number'];

    Vector.prototype.magnitude = function() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    };

    Vector.prototype.normalize_ = ['Void'];

    Vector.prototype.normalize = function() {
      return this.div({
        x: this.magnitude(),
        y: this.magnitude()
      });
    };

    Vector.prototype.print_ = ['Void'];

    Vector.prototype.print = function() {
      return console.log(this.x, this.y);
    };

    return Vector;

  })();

  Vector = deodorant.checkClass(Vector);

  vec = new Vector(5, 2);

  vec.add(new Vector(3, 3));

  vec.print();

  vec.sub(new Vector(2, 2));

  vec.print();

  vec.mul(new Vector(4, 4));

  vec.print();

  vec.div(new Vector(2, 2));

  vec.print();

  console.log(vec.magnitude());

  vec.normalize();

  vec.print();

  debugger;

}).call(this);
